"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить
работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список. Класс-исключение
должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При
этом работа скрипта не должна завершаться.
"""


class OnlyNumbersException(ValueError):
    def __init__(self, txt='You can use only numbers'):
        self.txt = txt

    @staticmethod
    def parse_value(value):
        try:
            return float(value)
        except ValueError:
            raise OnlyNumbersException()


if __name__ == '__main__':
    numbers = []
    while True:
        s = input('Enter next number or "stop" to finish: ')
        if s == 'stop':
            break
        try:
            numbers.append(OnlyNumbersException.parse_value(s))
        except OnlyNumbersException as e:
            print(e.txt)
    print(' '.join([str(number) for number in numbers]))
